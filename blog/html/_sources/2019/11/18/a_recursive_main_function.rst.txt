A recursive main function
=========================



.. author:: default
.. categories:: none
.. tags:: none
.. comments::

In languages such as C, there is a privileged function - ``main`` - that
is the entry point for execution. Running the program is tantamount to
calling ``main``, which in turn calls other functions.

Since ``main`` is a name in the global namespace, there is nothing to prevent
it from calling itself. Consider this recursive ``main`` function that
calculates the factorial:

.. literalinclude:: main.c
    :caption: main.c

``main`` takes two inputs. ``argc`` is the number of command line arguments,
and ``argv`` is an array of those arguments. The library function ``atoi``
converts a string to the integer it represents, and ``sprintf`` prints
to a string rather than standard output. So we decrement ``n`` with each recursive
call until the base case is reached, and print out the result. The accumulator ``acc``
is a static variable, which means it persists across function calls.

Here is an example output:

.. parsed-literal::

    $ gcc main.c
    $ ./a.out 5
    120

The fact that this programs works is convincing evidence that ``main``, other than being
the entry point, is an ordinary function that can be called from another part of
the code, including from itself.
